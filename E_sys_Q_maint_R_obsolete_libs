#!/usr/bin/perl -w
#******************************************************************************
=head1 Description

=over

=item Name

E_sys_Q_maint_R_obsolete_libs 2

=item Purpose

Narzędzie pomocnicze podczas porządkowania wersji bibliotek współdzielonych zainstalowanych w systemach uniksopodobnych w katalogu F</usr/lib64> lub odpowiednim.

=item Function

Znajduje i wypisuje nazwy plików: -bibliotek współdzielonych nie będących najaktualniejszą wersją w systemie, -skrótów, które nie podpadają pod szablon nazwy F<.so.*>, gdzie wersja musi być uogólnieniem (pominięciem podwersji) najaktualniejszej biblioteki.

=item Command parameters

[directory instead of F</usr/lib64>]

=item Working standard

Correct sym-links:

F<lib.so.*> -> regular file F<lib.so.*>, where "*" means that string versions match from left one shorter to right one full version.

F<lib.so.*> -> symbolic link F<lib.so.*.*>, etc (#,#+1), where "*" means number element of version string.

=back

=head1 Caution

To narzędzie sprawdza I<unikalność bibliotek dynamicznych> oraz I<poprawność skrótów> mających ten sam rdzeń nazwy.  Jakkolwiek systemy rodziny unix zwykle nie są zgodne z uniwersalnym standardem nazw wersji w nazwach plików bibliotek dynamicznych (F<.so.*>).  Więc to narzedzie sprawdza poprawność, która w zalożeniach autorów poszczególnych systemów uniksopodobnych nie jest utrzymywana.

Unikalność bibliotek dynamicznych przeważnie jest istotna ze wzgledu na niezawodność systemu (wykonywanie najnowszej wersji poszczególnych bibliotek dynamicznych) oraz oszczedność wykorzystania pamięci (wykonywanie jednej wersji poszczególnych bibliotek dynamicznych).  To narzędzie nie rozpozna jako te same bibliotek, które maja nazwy zmienione albo w systemie uzytkownika, albo z decyzji producenta.  Ponadto niekiedy w systemie wymagana jest obecność konkretnych wersji głównych biblioteki dynamicznej, ponieważ nastąpila drastyczna zmiana funkcji nowej wersji.

Poprawność skrótów nie jest możliwa do naprawienia przez administratora, jeśli programy instalacyjne systemu intencjonalnie tworzą takie skróty do nowych wersji bibliotek, ale można wyszukać i usunąć skróty będące pozostałosciami po błędach poprzednich instalacji oraz nieoczekiwane w projekcie danego systemu uniksopodobnego zapomniane korekty administratora.

Dlatego lista wynikowa wymaga interpretacji człowieka mającego doświadczenie administracji uszkodzonych systemów rodziny unix, a to narzędzie pozwala półautomatycznie sprawdzić poprawność czynności administratora podczas powazniejszego sprzątania systemu nieobjętego podręcznikami producentów systemów uniksopdobnych, którzy zalecają reinstalację systemu.

=head1 Author

=over

=item Copyright

(c)overcq

=back
=cut
#==============================================================================
use strict;
use warnings;
#==============================================================================
@ARGV <= 1 or die;
my $dir = '/usr/lib64';
$dir = $ARGV[0] if @ARGV == 1;
chdir( $dir ) or die;
#==============================================================================
sub Q_filename_R_version
{   my $name = shift;
    $name =~ /\.so(?:\.(\d+(?:\.\d+)*))?$/;
    if( defined $1 )
    {   return split /\./, $1;
    }else
    {   return ();
    }
}
#==============================================================================
print "# [0] $0\n";
my( %files, %links );
my $d;
opendir $d, '.';
while( readdir $d )
{   my @a = ();
    /\.so(?:\.(\d+(?:\.\d+)*))?$/ or next;
    my $name = $`;
    my $h;
    if( -l $_ )
    {   $h = \%links;
    }elsif( -f $_ )
    {   $h = \%files;
    }else
    {   print "${_}\t#ignored\n";
    }
    @a = split /\./, $1 if defined $1;
    $h->{$name} = [] unless exists $h->{$name};
    push @{$h->{$name}}, \@a;
}
closedir $d;
print "# [1] last library file\tobsoletes...\n";
foreach( keys %files )
{   goto Next unless @{$files{$_}} > 1;
    @{$files{$_}} =
      sort
      {   my $i = 0;
          while( defined( $a->[$i] ) and defined( $b->[$i] ))
          {   my $cmp = $a->[$i] <=> $b->[$i];
              return $cmp if $cmp;
              $i++;
          }
          return 1 if defined $a->[$i];
          return -1 if defined $b->[$i];
          return 0;
      }
      @{$files{$_}};
    print $_ .'.so.'. join( '.', @{$files{$_}[ $#{$files{$_}} ]} ) ."\t";
    for( my $i = 0; $i < $#{$files{$_}}; $i++ )
    {   print $_ .'.so.'. join( '.', @{$files{$_}->[$i]} ) .' ';
    }
    print "\n";
Next:
    @{$files{$_}} = @{$files{$_}[ $#{$files{$_}} ]};
}
print "# End of [1].\n";
print "# [2] Sym‐links that don\'t match template:\n";
Loop:
foreach my $name ( keys %links )
{   my $m = '';
    unless( exists $files{$name} )
    {   $m = 'Not available library';
        print( $name .'.so'. ( @$_ ? '.'. join( '.', @$_ ) : '' ) ."\t# ${m}.\n" ) foreach @{$links{$name}};
        next;
    }
    my $file = $name .'.so'. ( @{$files{$name}} ? '.'. join( '.', @{$files{$name}} ) : '' );
    @{$links{$name}} = sort { @$b <=> @$a } @{$links{$name}};
    foreach my $lv ( @{$links{$name}} )
    {   next unless defined $lv;
        $m = 'Version string greater than of library', goto Next unless @$lv < @{$files{$name}};
        my $i;
        for( $i = 0; $i != @$lv; $i++ )
        {   $m = 'Version mismatch with library', goto Next if $lv->[$i] != $files{$name}->[$i];
        }
        my $dest = readlink $name .'.so'. ( @$lv ? '.'. join( '.', @$lv ) : '' );
        next if $dest eq $file;
        foreach( @{$links{$name}} )
        {   next unless defined $_;
            last if $_ == $lv;
            next Loop if @$_ == @$lv + 1
              and $name .'.so'. ( @$_ ? '.'. join( '.', @$_ ) : '' ) eq $dest;
        }
        $m = "Indirect link node (${dest})";
Next:   print $name .'.so'. ( @$lv ? '.'. join( '.', @$lv ) : '' ) ."\t# ${m}.\n";
    }
}
print "# End of [2].\n";
print "# End of [0].\n";
#******************************************************************************
